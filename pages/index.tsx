import { pixel } from '@prisma/client';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useRef, useState } from 'react';
import { Canvas } from '../components/canvas/Canvas';
import { ColorRegister } from '../components/colorregister/ColorRegister';
import { Download } from '../components/download/Download';
import { color, username } from '@prisma/client'
import { homeService } from '../service/home.service';
import { pixelsService } from '../service/pixels.service';
import styles from '../styles/Home.module.css';

type Props = {
  toolbar: string;
}

const Home: NextPage<Props> = ({ toolbar }) => {

  const [errorMessage, setErrorMessage] = useState('');
  const [pixels, setPixels] = useState<(pixel & { color: color, username: username })[]>([]);
  const colorPickerInput = useRef<Array<HTMLInputElement | null>>([]);
  const usernameInput = useRef<HTMLInputElement | null>(null);
  const [buttonDisabled, setButtonDisabled] = useState(false);
  const [selected, setSelected] = useState(0);

  useEffect(() => {
    getAllPixels();
  }, []);

  const getAllPixels = async (): Promise<void> => {
    const response = await pixelsService.getAllPixels();

    if (typeof response === 'string') {
      setErrorMessage(response);
      return;
    }
    setPixels(response);

  }

  const drawPixel = async (): Promise<void> => {
    setButtonDisabled(true);
    const validateResponse = homeService.validatePixelInput(selected, colorPickerInput, usernameInput);
    if (validateResponse.error) {
      setErrorMessage(validateResponse.message);
      setButtonDisabled(false);
      return;
    }

    const response = await pixelsService.drawPixel(selected, colorPickerInput, usernameInput);

    if (typeof response === 'string') {
      setErrorMessage(response);
      setButtonDisabled(false);
      return;
    }

    const pixelsLength = pixels.length;
    for (let i = 0; i < pixelsLength; i++) {
      if (pixels[i].id === response.id) {
        let tmpPixels = pixels;
        tmpPixels[i] = response;
        setPixels(tmpPixels);
      }
    }
    setButtonDisabled(false);
  }

  return (
    <div>
      <Head>
        <title>Pixeldrawer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles.contents}>
          {errorMessage &&
            <div className='errorMessage'>{errorMessage}</div>
          }
          <Canvas
            pixels={pixels}
            selected={selected}
            setSelected={setSelected}
            toolbar={toolbar}
            username={(usernameInput.current !== null ? usernameInput.current.value: '')}
            color={(colorPickerInput.current[0] ? colorPickerInput.current[0].value : '')}
          ></Canvas>
          <ColorRegister
            drawPixel={drawPixel}
            buttonDisabled={buttonDisabled}
            colorPickerInput={colorPickerInput}
            usernameInput={usernameInput}
          ></ColorRegister>
          <Download></Download>
        </div>
      </main>
    </div>
  );
}

export default Home
